{"version":3,"sources":["App.js"],"names":["styles","StyleSheet","create","containerStyle","flex","scrollViewStyle","padding","justifyContent","headingStyle","fontSize","textAlign","marginBottom","HomeScreen","useForm","defaultValues","mode","control","setFocus","handleSubmit","style","contentContainerStyle","formConfigArray","name","type","textInputProps","label","rules","required","value","message","pattern","title","onPress","data","console","log","SettingsScreen","alignItems","Tab","createBottomTabNavigator","App","Navigator","Screen","component","options","tabBarIcon","makeIconRender","color","size"],"mappings":"sFAAA,6JASMA,EAASC,UAAWC,OAAO,CAC/BC,eAAgB,CACdC,KAAM,GAERC,gBAAiB,CACfD,KAAM,EACNE,QAAS,GACTC,eAAgB,UAElBC,aAAc,CACZC,SAAU,GACVC,UAAW,SACXC,aAAc,MAIZC,EAAa,WAEjB,MAA4CC,kBAAQ,CAClDC,cAAe,GAEfC,KAAM,aAHAC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAM3B,OACE,cAAC,UAAI,CAACC,MAAOnB,EAAOG,eAAe,SACjC,eAAC,UAAU,CAACiB,sBAAuBpB,EAAOK,gBAAgB,UACxD,cAAC,UAAI,CAACc,MAAOnB,EAAOQ,aAAa,SAAC,0BAClC,cAAC,cAAW,CACVQ,QAASA,EACTC,SAAUA,EACVI,gBAAiB,CACf,CACEC,KAAM,OACNC,KAAM,OACNC,eAAgB,CACdC,MAAO,QAETC,MAAO,CACLC,SAAU,CACRC,OAAO,EACPC,QAAS,sBAIf,CACEP,KAAM,WACNC,KAAM,OACNC,eAAgB,CACdC,MAAO,YAETC,MAAO,CACLC,SAAU,CACRC,OAAO,EACPC,QAAS,2BAIf,CACEN,KAAM,QACND,KAAM,QAENI,MAAO,CACLC,SAAU,CACRC,OAAO,EACPC,QAAS,sBAGbL,eAAgB,CACdC,MAAO,UAGX,CACEF,KAAM,OACND,KAAM,UAENI,MAAO,CACLC,SAAU,CACRC,OAAO,EACPC,QAAS,uBAEXC,QAAS,CACPF,MACE,yBACFC,QAAS,uBAGbL,eAAgB,CACdC,MAAO,gBAMf,cAAC,UAAM,CACLM,MAAM,SACNhB,KAAM,YACNiB,QAASd,GAAa,SAACe,GACrBC,QAAQC,IAAI,YAAaF,cASrC,SAASG,IACP,OACE,cAAC,UAAI,CAACjB,MAAO,CAAEf,KAAM,EAAGG,eAAgB,SAAU8B,WAAY,UAAW,SACvE,cAAC,UAAI,UAAC,6BAKZ,IAAMC,EAAMC,oBAEG,SAASC,IACtB,OACE,cAAC,UAAa,UACZ,cAAC,UAAmB,UAClB,eAACF,EAAIG,UAAS,WACZ,cAACH,EAAII,OAAM,CACTpB,KAAK,QACLqB,UAAW/B,EACXgC,QAAS,CAAEC,WAAYC,EAAe,WAExC,cAACR,EAAII,OAAM,CACTpB,KAAK,WACLqB,UAAWP,EACXQ,QAAS,CAAEC,WAAYC,EAAe,iBASlD,SAASA,EAAexB,GACtB,OAAO,gBAAGyB,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAI,OACnB,cAAC,UAAsB,CAAC1B,KAAMA,EAAMyB,MAAOA,EAAOC,KAAMA,O","file":"static/js/app.14cccb95.chunk.js","sourcesContent":["import React from 'react';\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useForm } from 'react-hook-form';\nimport { Button, ScrollView, StyleSheet, Text, View } from \"react-native\";\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { FormBuilder } from 'react-native-paper-form-builder';\n\nconst styles = StyleSheet.create({\n  containerStyle: {\n    flex: 1,\n  },\n  scrollViewStyle: {\n    flex: 1,\n    padding: 15,\n    justifyContent: 'center',\n  },\n  headingStyle: {\n    fontSize: 30,\n    textAlign: 'center',\n    marginBottom: 40,\n  },\n});\n\nconst HomeScreen = () => {\n\n  const { control, setFocus, handleSubmit } = useForm({\n    defaultValues: {\n    },\n    mode: 'onChange',\n  });\n\n  return (\n    <View style={styles.containerStyle}>\n      <ScrollView contentContainerStyle={styles.scrollViewStyle}>\n        <Text style={styles.headingStyle}>New User ðŸ‘‹</Text>\n        <FormBuilder\n          control={control}\n          setFocus={setFocus}\n          formConfigArray={[\n            {\n              name: 'name',\n              type: 'text',\n              textInputProps: {\n                label: 'Name',\n              },\n              rules: {\n                required: {\n                  value: true,\n                  message: 'Name is required',\n                },\n              },\n            },\n            {\n              name: 'pronouns',\n              type: 'text',\n              textInputProps: {\n                label: 'Pronouns',\n              },\n              rules: {\n                required: {\n                  value: true,\n                  message: 'Pronouns are required',\n                },\n              },\n            },\n            {\n              type: 'email',\n              name: 'email',\n\n              rules: {\n                required: {\n                  value: true,\n                  message: 'Email is required',\n                },\n              },\n              textInputProps: {\n                label: 'Email',\n              },\n            },\n            {\n              type: 'text',\n              name: 'Zipcode',\n\n              rules: {\n                required: {\n                  value: true,\n                  message: 'Zipcode is required',\n                },\n                pattern: {\n                  value:\n                    /^\\d{5}(?:[-\\s]\\d{4})?$/,\n                  message: 'Zipcode is invalid',\n                },\n              },\n              textInputProps: {\n                label: 'Zip Code',\n              },\n            },\n\n          ]}\n        />\n        <Button\n          title='Submit'\n          mode={'contained'}\n          onPress={handleSubmit((data) => {\n            console.log('form data', data);\n          })}>\n\n        </Button>\n      </ScrollView>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <Text>Settings could go here</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <NavigationContainer>\n        <Tab.Navigator>\n          <Tab.Screen\n            name=\"Found\"\n            component={HomeScreen}\n            options={{ tabBarIcon: makeIconRender(\"home\") }}\n          />\n          <Tab.Screen\n            name=\"Settings\"\n            component={SettingsScreen}\n            options={{ tabBarIcon: makeIconRender(\"cog\") }}\n          />\n        </Tab.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n\n  );\n}\n\nfunction makeIconRender(name) {\n  return ({ color, size }) => (\n    <MaterialCommunityIcons name={name} color={color} size={size} />\n  );\n}\n"],"sourceRoot":""}